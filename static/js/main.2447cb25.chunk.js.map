{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.jsx","containers/App.jsx","action.js","constants.js","reducers.js","registerServiceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","Scroll","props","style","overflow","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","this","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2447cb25.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default CardList\n","import React from 'react'\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflow: 'scroll',\n        height: '80vh',\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll\n","import React from 'react'\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { requestRobots, setSearchField } from '../action'\nimport CardList from '../components/CardList'\nimport Scroll from '../components/Scroll'\nimport SearchBox from '../components/SearchBox.jsx'\nimport './App.css'\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return isPending ? (\n      <h1> Loading </h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\"> RoboFriends </h1>{' '}\n        <SearchBox searchChange={onSearchChange} />{' '}\n        <Scroll>\n          <CardList robots={filteredRobots} />{' '}\n        </Scroll>{' '}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from './constants';\n\nexport const setSearchField = text => {\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n}\n\nexport const requestRobots = () => dispatch => {\n    dispatch({\n        type: REQUEST_ROBOTS_PENDING\n    })\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({\n            type: REQUEST_ROBOTS_SUCCESS,\n            payload: data\n        }))\n        .catch(err => dispatch({\n            type: REQUEST_ROBOTS_FAILED,\n            payload: err\n        }))\n\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: '',\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return { ...state,\n                searchField: action.payload\n            }\n        default:\n            return { ...state\n            }\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return { ...state,\n                isPending: true\n            }\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state,\n                robots: action.payload,\n                isPending: false\n            }\n        case REQUEST_ROBOTS_FAILED:\n            return { ...state,\n                error: action.payload,\n                isPending: false\n            }\n        default:\n            return state\n    }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport 'tachyons'\nimport App from './containers/App.jsx'\nimport './index.css'\nimport { requestRobots, searchRobots } from './reducers'\nimport registerServiceWorker from './registerServiceWorker'\n\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({\n  searchRobots,\n  requestRobots,\n})\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\nregisterServiceWorker()\n"],"sourceRoot":""}